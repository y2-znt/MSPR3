name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DB_URL: jdbc:postgresql://db:5432/db_name
  DB_USERNAME: db_username
  DB_PASSWORD: db_password
  DB_NAME: db_name
  DB_PORT: "5432"

jobs:
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    container: maven:3.9.9-amazoncorretto-21-alpine
    steps:
      - uses: actions/checkout@v4
      - name: Build backend
        working-directory: backend
        run: mvn clean package -DskipTests
      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: backend/target/*.jar
          retention-days: 7

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    container: node:20-alpine
    steps:
      - uses: actions/checkout@v4
      - name: Install and build frontend
        working-directory: frontend
        run: |
          npm install
          npm run build
      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/
          retention-days: 7

  build-ai-api:
    name: Build AI API
    runs-on: ubuntu-latest
    container: python:3.11-slim
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        working-directory: ai-api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Upload AI API artifact
        uses: actions/upload-artifact@v4
        with:
          name: ai-api
          path: ai-api/
          retention-days: 7

  test-backend:
    needs: build-backend
    name: Test Backend
    runs-on: ubuntu-latest
    container: maven:3.9.9-amazoncorretto-21-alpine
    services:
      db:
        image: postgres:latest
        env:
          POSTGRES_DB: db_name
          POSTGRES_USER: db_username
          POSTGRES_PASSWORD: db_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U db_username -d db_name"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - name: Run backend tests
        working-directory: backend
        run: mvn test

  test-frontend:
    needs: build-frontend
    name: Test Frontend
    timeout-minutes: 90
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      - name: Install Playwright Browsers
        working-directory: frontend
        run: npm run install:browsers
      - name: Start server and wait
        working-directory: frontend
        run: |
          npm run start &
          sleep 30
      - name: Run Playwright tests
        working-directory: frontend
        run: npm run test:e2e:ci
      - name: Upload frontend test results
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

  deploy-backend:
    name: Deploy Backend Docker Image
    # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: test-backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/backend.prod.dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mspr3-backend:latest

  deploy-frontend:
    name: Deploy Frontend Docker Image
    # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: test-frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/frontend.dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mspr3-frontend:latest

  deploy-ai-api:
    name: Deploy AI API Docker Image
    # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build-ai-api
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Download AI API artifact
        uses: actions/download-artifact@v4
        with:
          name: ai-api
          path: ai-api
      - name: Build and push AI API image
        uses: docker/build-push-action@v5
        with:
          context: ./ai-api
          file: ./ai-api/ai.prod.dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mspr3-ai-api:latest

  # performance-test:
  #   name: Performance Tests
  #   runs-on: ubuntu-latest
  #   container:
  #     image: maven:3.9.9-amazoncorretto-21-alpine
  #     options: --user root
  #   needs: [build-backend, test-backend]
  #   services:
  #     db:
  #       image: postgres:latest
  #       env:
  #         POSTGRES_DB: db_name
  #         POSTGRES_USER: db_username
  #         POSTGRES_PASSWORD: db_password
  #       ports:
  #         - 5432:5432
  #       options: >-
  #         --health-cmd="pg_isready -U db_username -d db_name"
  #         --health-interval=10s
  #         --health-timeout=5s
  #         --health-retries=5
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install required packages for JMeter
  #       run: apk add --no-cache fontconfig ttf-dejavu
  #     - name: Download backend artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: backend-jar
  #         path: backend/target/
  #     - name: Create JMeter resources directory
  #       run: mkdir -p backend/src/test/resources/jmeter/bin
  #     - name: Create JMeter properties file
  #       run: |
  #         cat > backend/src/test/resources/jmeter/bin/jmeter.properties << 'EOF'
  #         jmeter.save.saveservice.output_format=xml
  #         jmeter.save.saveservice.data_type=true
  #         jmeter.save.saveservice.label=true
  #         jmeter.save.saveservice.response_code=true
  #         jmeter.save.saveservice.response_data=true
  #         log_level.jmeter=INFO
  #         EOF
  #     - name: Start the backend service
  #       run: |
  #         nohup java -jar backend/target/backend-0.0.1-SNAPSHOT.jar > backend.log 2>&1 &
  #         echo "Waiting for backend to start..."
  #         sleep 30
  #     - name: Run JMeter Tests
  #       working-directory: backend
  #       run: mvn test -P performance-tests
  #     - name: Upload JMeter Results
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: jmeter-results
  #         path: backend/target/jmeter-results/
  #         retention-days: 7
